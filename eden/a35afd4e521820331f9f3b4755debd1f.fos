import parser, random, glob

def mix(dna):
    try: mate = random.choice(glob.glob('*.fos'))
    except(IndexError): return dna
    mate_tup = parser.suite(open(mate).read()).totuple()
    cnt = {}
    for tag in dna: cnt[tag] = len(dna[tag])
    # Add mate's dna onto own
    p, dna = tup2dna(mate_tup, dna)
    # There are now 2 different top level tags (257).  We now begin mixing.
    for tag in cnt:
        # Safest is to randomly switch the order of values for tags that used 
        # to have 1 value, but now have 2 after joining with mate dna.
        if cnt[tag] == 1 and len(dna[tag]) == 2 and random.randrange(2):
            dna[tag].reverse()
    return dna

def tup2dna(tup, dna={}):
    """Convert a tuple generated by parser.suite into a dictionary of tags
    and possible values out of the python grammar."""
    tag = tup[0]
    val = list(tup[1:])
    for i, v in enumerate(val):
        if type(v) is tuple:
            v, dna = tup2dna(v, dna=dna)
            val[i] = v
    try: return (tag, dna[tag].index(val)), dna
    except(ValueError):
        dna[tag].append(val)
        return (tag, len(dna[tag])-1), dna
    except(KeyError):
        dna[tag] = [val]
        return (tag, 0), dna

def txt2dna(text):
    tup = parser.suite(text).totuple()
    p, dna = tup2dna(tup)
    return dna

dna = txt2dna(mytext)

while True:
    mdna = mix(dna.copy())
    db.put(mdna, mytext)
