import parser, socket, time, struct

class UDP_TX_Socket(socket.socket):
    """Implements a UDP socket which transmits at a given ip, port."""
    def __init__(self, ip, port):
        self.ip = ip
        self.port = port
        socket.socket.__init__(self, type=socket.SOCK_DGRAM)
        self.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 20)
        self.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_LOOP, 1)
        req = struct.pack('4sl', socket.inet_aton(ip), socket.INADDR_ANY)
        self.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, req)
    def tx(self, data):
        """Send a UDP packet containing binary 'data'."""
        self.sendto(data, (self.ip, self.port))

class UDP_RX_Socket(socket.socket):
    """An interface for receiving UDP packets over an ip, port."""
    def __init__(self, ip, port):
        # Create datagram socket
        socket.socket.__init__(self, type=socket.SOCK_DGRAM)
        # Setup to allow reuse of address (is this necessary?)
        self.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        # Join multicast group
        req = struct.pack('4sl', socket.inet_aton(ip), socket.INADDR_ANY)
        self.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, req)
        # Bind socket
        self.bind(('', port))

class SexSocket(UDP_TX_Socket, UDP_RX_Socket):
    def __init__(self, ip='226.0.0.1', port=2626, packet_size=2**15):
        UDP_TX_Socket.__init__(self, ip, port)
        UDP_RX_Socket.__init__(self, ip, port)
        self.packet_size = packet_size
    def tx_voc(self, voc):
        data = (repr(voc) + ' ' * self.packet_size)[:self.packet_size]
        self.tx(data)
    def rx_voc(self):
        while True:
            data = self.recv(self.packet_size)
            try: return eval(data)
            except(SyntaxError): time.sleep(.01)
    def mix_voc(self, voc):
        other_voc = self.rx_voc()
        print voc == other_voc
        for o in other_voc:
            for k in other_voc[o]:
                try: i = voc[o].index(k)
                except(KeyError): voc[o] = [k]
                except(ValueError): voc[o].append(k)
        return voc

def tup2voc(tup, voc={}):
    """Convert a tuple generated by parser.suite into a dictionary of tags
    and possible values out of the python grammar."""
    tag = tup[0]
    val = list(tup[1:])
    for i, v in enumerate(val):
        if type(v) is tuple:
            v, voc = tup2voc(v, voc=voc)
            val[i] = v
    try: return (tag, voc[tag].index(val)), voc
    except(ValueError):
        voc[tag].append(val)
        return (tag, len(voc[tag])-1), voc
    except(KeyError):
        voc[tag] = [val]
        return (tag, 0), voc

tup = parser.suite(open(__file__).read()).totuple()
program, voc = tup2voc(tup)
s = SexSocket()
s.tx_voc(voc)
voc = s.mix_voc(voc)
s.close()
s = SexSocket('225.0.0.1', port=2525)
for i in range(10):
    s.tx_voc(voc)
